'use client'; // This layout uses client-side hooks and event listeners

// Include imports for Lenis AND the cursor
import React, { useEffect, useRef, useState } from 'react';
import Lenis from '@studio-freight/lenis';
import { motion, useMotionValue, useSpring } from "framer-motion";
import Image from "next/image";
import GooeyNav from "@/blocks/Components/GooeyNav/GooeyNav";
import { usePathname } from 'next/navigation';
// Import the Link component from next/link
import Link from 'next/link';


import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { gilroy } from "@/fonts/fonts";

// Define items for GooeyNav (moved from page.tsx)
const items = [
  { label: "Home", href: "/" },
  { label: "Awards", href: "/Hackathons" },
  { label: "Contact", href: "#" }, // Adjust as needed
];


const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// Metadata is for server components, so it stays outside the client component export
// It should ideally be in a separate metadata.ts file in App Router client components
// Keeping it commented out as in your provided code.
/*
  // app/metadata.ts
  import type { Metadata } from 'next';

  export const metadata: Metadata = {
    title: "Create Next App",
    description: "Generated by create next app",
  };
*/


export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // State for mobile menu (moved from page.tsx)
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  // Get current pathname
  const pathname = usePathname();

  // Calculate active index based on pathname
  const activeIndex = items.findIndex(item => item.href === pathname);

  // --- Lenis Smooth Scrolling Implementation ---
  // Use useRef to hold the Lenis instance
  const lenis = useRef<Lenis | null>(null);

  useEffect(() => {
    // Initialize Lenis only in the browser environment
    if (typeof window !== 'undefined') {
      lenis.current = new Lenis({
        duration: 1.2, // Adjust the duration for scroll speed (seconds)
        easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)), // Easing function (default lenis easing)
        smoothWheel: true, // Enable smooth scrolling for mouse wheel
        // wheelMultiplier: 1, // Adjust scroll speed sensitivity
        // touchMultiplier: 1,
        // infinite: false, // Set to true for infinite looping scrolling
        // autoResize: true, // Automatically handle window resizing
      });

      // This function updates Lenis on each frame using requestAnimationFrame
      function raf(time: number) {
        lenis.current?.raf(time);
        requestAnimationFrame(raf);
      }

      // Start the animation loop
      requestAnimationFrame(raf);

      // Clean up the Lenis instance when the component unmounts
      return () => {
        lenis.current?.destroy();
      };
    }
  }, []); // Empty dependency array ensures this effect runs only once on mount and cleans up on unmount
  // --- End Lenis Implementation ---


  // --- Custom Cursor Implementation (Moved from page.tsx) ---
  // Use MotionValues to track the raw mouse position
  // Initialize to 0 on both server and client to prevent hydration errors
  const cursorX = useMotionValue(0);
  const cursorY = useMotionValue(0);

  // Configure spring physics for the dot (follows closely)
  const dotSpringConfig = { damping: 25, stiffness: 200 };
  // Configure spring physics for the outline (trails the dot)
  const outlineSpringConfig = { damping: 35, stiffness: 400 }; // More damping/less stiffness for trailing

  // Create sprung motion values for the inner dot
  const dotX = useSpring(cursorX, dotSpringConfig);
  const dotY = useSpring(cursorY, dotSpringConfig);

  // Create sprung motion values for the outer outline, based on the dot's sprung values
  const outlineX = useSpring(dotX, outlineSpringConfig);
  const outlineY = useSpring(dotY, outlineSpringConfig);

  // Effect to update mouse position on mousemove AND set initial position after mount
  useEffect(() => {
    const moveCursor = (e: MouseEvent) => {
      cursorX.set(e.clientX);
      cursorY.set(e.clientY);
    };

    // Set initial cursor position to the center of the window after the component mounts
    // This runs only on the client after hydration
    // setTimeout is optional, but can help ensure initial positioning after paint
    setTimeout(() => {
        cursorX.set(window.innerWidth / 2);
        cursorY.set(window.innerHeight / 2);
    }, 0);


    // Add event listener for subsequent mouse movements
    window.addEventListener('mousemove', moveCursor);

    // Clean up event listener on component unmount
    return () => {
      window.removeEventListener('mousemove', moveCursor);
    };
  }, [cursorX, cursorY]); // Dependencies: update effect if motion values change (they won't here, but good practice)
  // --- End Custom Cursor Implementation ---


  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} ${gilroy.variable} antialiased font-gilroy`}
        style={{ cursor: 'none' }} // Apply cursor: none globally to the body
        >
        <motion.div
            style={{
            x: dotX, // Bind x position to the dot's sprung motion value
            y: dotY, // Bind y position to the dot's sprung motion value
            pointerEvents: 'none', // Ensure the cursor doesn't block clicks on elements below it
            left: 0, // Position relative to the viewport
            top: 0,
            position: 'fixed', // Stay in fixed position relative to the viewport
            zIndex: 9999, // Ensure it's always on top
            transform: 'translate(-50%, -50%)', // Center the div exactly on the cursor coordinates
            width: '8px', // Size of the inner dot
            height: '8px',
            borderRadius: '50%', // Make it round
            backgroundColor: '#06b6d4', // Cyan color (Tailwind cyan-500 equivalent)
            boxShadow: '0 0 10px 4px rgba(6, 182, 212, 0.7)', // Glowing effect
            }}
        />
        <motion.div
            style={{
            x: outlineX, // Bind x position to the outline's sprung motion value
            y: outlineY, // Bind y position to the outline's sprung motion value
            pointerEvents: 'none', // Ensure the cursor doesn't block clicks
            left: 0, // Position relative to the viewport
            top: 0,
            position: 'fixed', // Stay in fixed position
            zIndex: 9998, // Z-index slightly lower than the dot
            transform: 'translate(-50%, -50%)', // Center the div
            width: '30px', // Size of the outer circle
            height: '30px',
            borderRadius: '50%', // Make it round
            border: '2px solid #0891b2', // Border color (Tailwind cyan-600 equivalent)
            // Optional: opacity for transparency
            opacity: 0.5,
            }}
        />
        {/* Header Section (Moved from page.tsx) */}
        <header className="sticky top-0 z-50 flex w-full items-center justify-between p-6 md:p-8 bg-[#101112]/90 backdrop-blur-sm">
          {/* Logo */}
          {/* Using Link for Logo if it navigates to home */}
           <Link href="/" passHref>
             <Image
               src="/logo/lauv-logo2.svg"
               alt="Lauv Logo"
               width={35}
               height={35}
               className="m-10 transition-all duration-300 hover:scale-150 hover:rotate-10 hover:brightness-125"
             />
           </Link>


          {/* Desktop Navigation - hidden on small screens */}
          <div className="hidden md:block font-medium" style={{ height: '70px', width: '400px', position: 'relative' }}>
            <GooeyNav
              items={items} // The items array contains { label, href }
              particleCount={15}
              particleDistances={[90, 10]}
              particleR={100}
              initialActiveIndex={activeIndex !== -1 ? activeIndex : 0} // Set dynamically, default to 0 if not found
              animationTime={600}
              timeVariance={300}
              colors={[1, 2, 3, 1, 2, 3, 1, 4]}
              // IMPORTANT: The GooeyNav component itself needs to use <Link> internally for its items
            />
          </div>

          {/* Hamburger button - visible only on small screens */}
          <button
            className="md:hidden text-white p-2 focus:outline-none"
            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
          >
            <div className="w-6 h-0.5 bg-white mb-1.5 transition-all duration-300 ease-in-out"></div>
            <div className="w-6 h-0.5 bg-white mb-1.5 transition-all duration-300 ease-in-out"></div>
            <div className="w-6 h-0.5 bg-white transition-all duration-300 ease-in-out"></div>
          </button>
        </header>

        {/* Mobile menu - only visible when mobileMenuOpen is true */}
        {mobileMenuOpen && (
          <div className="md:hidden bg-[#1a1b1c] absolute top-[90px] right-0 left-0 z-50 p-5">
            <nav className="flex flex-col space-y-4">
              {items.map((item, index) => (
                // *** REPLACED <a> with <Link> here ***
                <Link
                  key={index}
                  href={item.href}
                  className="text-white hover:text-gray-300 py-2 px-4 font-medium"
                  onClick={() => setMobileMenuOpen(false)} // Keep the click handler to close the menu
                >
                  {item.label}
                </Link>
              ))}
            </nav>
          </div>
        )}
        {/* End Header Section */}

        {children} {/* This is where your page content (like page.tsx) will be rendered */}
      </body>
    </html>
  );
}