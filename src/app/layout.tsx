'use client'; // This layout uses client-side hooks and event listeners

import { useEffect, useRef } from 'react'; // Import useEffect and useRef
import Lenis from '@studio-freight/lenis'; // Import Lenis

import type { Metadata } from "next"; // Keep existing imports
import { Geist, Geist_Mono } from "next/font/google"; // Keep existing imports
import "./globals.css"; // Keep existing imports
import { gilroy } from "@/fonts/fonts"; // Keep existing imports

const geistSans = Geist({ // Keep existing font definition
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({ // Keep existing font definition
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// Metadata is for server components, so it stays outside the client component export
// export const metadata: Metadata = { // Keep existing metadata (remove export if it causes issues with 'use client')
//   title: "Create Next App",
//   description: "Generated by create next app",
// };
// NOTE: If you get an error about `metadata` in a client component, you might need to
// define and export metadata from a separate `metadata.ts` file in the same directory
// or remove the `export` keyword if it's only intended for this file.
// For now, I've commented out the export to avoid potential issues with 'use client'.
// You can define metadata in a separate `metadata.ts` file like this:
/*
  // app/metadata.ts
  import type { Metadata } from 'next';

  export const metadata: Metadata = {
    title: "Create Next App",
    description: "Generated by create next app",
  };
*/


export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // Use useRef to hold the Lenis instance
  const lenis = useRef<Lenis | null>(null);

  useEffect(() => {
    // Initialize Lenis only in the browser environment
    if (typeof window !== 'undefined') {
      lenis.current = new Lenis({
        duration: 1.2, // Adjust the duration for scroll speed (seconds)
        easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)), // Easing function (default lenis easing)
        direction: 'vertical', // Set scrolling direction
        gestureDirection: 'vertical', // Set gesture direction for touchpads/touch screens
        smoothWheel: true, // Enable smooth scrolling for mouse wheel
        smoothTouch: false, // Optional: Disable smooth touch scrolling (can be less intuitive on mobile)
        // wheelMultiplier: 1, // Adjust scroll speed sensitivity
        // touchMultiplier: 1,
        // infinite: false, // Set to true for infinite looping scrolling
        // autoResize: true, // Automatically handle window resizing
      });

      // This function updates Lenis on each frame using requestAnimationFrame
      function raf(time: number) {
        lenis.current?.raf(time);
        requestAnimationFrame(raf);
      }

      // Start the animation loop
      requestAnimationFrame(raf);

      // Clean up the Lenis instance when the component unmounts
      return () => {
        lenis.current?.destroy();
      };
    }
  }, []); // Empty dependency array ensures this effect runs only once on mount and cleans up on unmount

  return (
    <html lang="en">
      {/*
        Apply cursor: none style to the body here.
        This hides the default cursor globally for your application.
        Ensure your SkillTag component (and any others) do NOT explicitly
        set cursor: pointer or default, unless you want those specific elements
        to show the native cursor.
      */}
      <body
        className={`${geistSans.variable} ${geistMono.variable} ${gilroy.variable} antialiased font-gilroy`}
        style={{ cursor: 'none' }} // Apply cursor: none globally to the body
      >
        {/*
          Your custom cursor motion.div elements from page.tsx could also
          be moved here in the root layout if you want the custom cursor
          to be present on all pages.
          If you move them here, also move the useMotionValue, useSpring,
          and useEffect hooks related to the cursor from page.tsx into this layout.
        */}
        {children} {/* This is where your page content (like page.tsx) will be rendered */}
      </body>
    </html>
  );
}
